---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
  labels:
    app: {{ .Release.Name }}-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {{ .Release.Name }}-api
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-api
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
      - name: api
        image: {{ .Values.image.apirepo}} #quay.io/curriki/api:stage
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        readinessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: api-env
          mountPath: /var/www/html/.env
          subPath: .env
        - name: nfs-volume
          mountPath: /var/www/html/storage
        envFrom:
        - secretRef:
            name: api-env
        resources:
          limits:
            cpu: 600m
            memory: 1500Mi
          requests:
            cpu: 350m
            memory: 800Mi
        command:
        - /bin/sh
        - -c
        - |
          php /var/www/html/artisan storage:link
          apache2ctl -D FOREGROUND
      volumes:
      - name: api-env
        secret:
          secretName: api-env
          items:
            - key: api-env-secret
              path: .env
      - name: nfs-volume
        nfs:
          server: {{ .Values.nfsServer }}
          path: /mnt/storage
          readOnly: no


---
apiVersion: v1
kind: Service
metadata:
  name: api-svc
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: {{ .Release.Name }}-api

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Release.Name }}-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 50


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-cron
  labels:
    app: {{ .Release.Name }}-cron
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-cron
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-cron
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
      - name: api
        image: {{ .Values.image.cronrepo}}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        readinessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: api-env
          mountPath: /var/www/html/.env
          subPath: .env
        - name: nfs-volume
          mountPath: /var/www/html/storage
        envFrom:
        - secretRef:
            name: api-env
        command:
        - /bin/sh
        - -c
        - |
          php /var/www/html/artisan storage:link
          service cron start
          apache2ctl -D FOREGROUND
      volumes:
      - name: api-env
        secret:
          secretName: api-env
          items:
            - key: api-env-secret
              path: .env

      - name: nfs-volume
        nfs:
          server: {{ .Values.nfsServer }}
          path: /mnt/storage
          readOnly: no



---
apiVersion: batch/v1
kind: Job
metadata:
  name: migrations
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
      containers:
      - name: migration
        image: {{ .Values.image.apirepo}}
        imagePullPolicy: Always
        command: 
        - /bin/sh
        - -c
        - php /var/www/html/artisan migrate --force
        readinessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: api-env
          mountPath: /var/www/html/.env
          subPath: .env
        - name: nfs-volume
          mountPath: /var/www/html/storage
        envFrom:
        - secretRef:
            name: api-env
      restartPolicy: Never
      volumes:
      - name: api-env
        secret:
          secretName: api-env
          items:
            - key: api-env-secret
              path: .env
      - name: nfs-volume
        nfs:
          server: {{ .Values.nfsServer }}
          path: /mnt/storage
          readOnly: no
  backoffLimit: 4


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-queue
  labels:
    app: {{ .Release.Name }}-queue
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {{ .Release.Name }}-queue
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-queue
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
      - name: queue
        image: {{ .Values.image.apirepo}}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        command: 
        - /bin/sh
        - -c
        - php /var/www/html/artisan queue:work --timeout=0
        volumeMounts:
        - name: api-env
          mountPath: /var/www/html/.env
          subPath: .env
        - name: nfs-volume
          mountPath: /var/www/html/storage
        envFrom:
        - secretRef:
            name: api-env
      volumes:
      - name: api-env
        secret:
          secretName: api-env
          items:
            - key: api-env-secret
              path: .env
      - name: nfs-volume
        nfs:
          server: {{ .Values.nfsServer }}
          path: /mnt/storage
          readOnly: no