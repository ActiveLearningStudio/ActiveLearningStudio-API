name: '2. User'
description: |-

  APIs for user management
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/users/notifications/{notification}/download-export'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Download Exported Project'
      description: 'Download the specific notification project.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      notification:
        name: notification
        description: 'The notification.'
        required: true
        example: iusto
        type: string
        custom: []
      notification_id:
        name: notification_id
        description: 'Current id of a notification'
        required: true
        example: '123'
        type: string
        custom: []
    cleanUrlParameters:
      notification: iusto
      notification_id: '123'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Notification has been deleted successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "errors": [
              "Not an export notification.",
              "Link has expired.",
              "Notification with provided id does not exists."
            ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users/organizations
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get All User Organizations'
      description: 'Get a list of the users organizations'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "data": [
                  {
                      "id": 1,
                      "name": "Curriki Studio",
                      "description": "Curriki Studio, default organization.",
                      "image": "/storage/organizations/PlPVBtEVfKEU8PBI1eknYgW3kjIf5YdpILBS0Yyr.png",
                      "favicon": "/storage/organizations/favicon/PlPVBtEVfKEU8PBI1eknYgW3kjIf5YdpILBS0Yyr.png",
                      "domain": "currikistudio"
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/subscribe
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Accept Terms'
      description: 'Accept Terms and Privacy Policy.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 500
        content: |-
          {
            "errors": [
              "Failed to subscribe."
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
              "user": {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "email": "john.doe@currikistudio.org",
                "organization_name": "Curriki",
                "organization_type": null,
                "job_title": "Developer",
                "address": "20660 Stevens Creek Blvd #332, Cupertino, CA 95014",
                "phone_number": "+1234567890",
                "website": "www.currikistudio.org",
                "subscribed": true,
                "organization_role": "Admin",
                "organization_role_id": 1,
                "organization_joined_at": "2022-10-12",
                "projects_count": 5,
                "groups_count": 1,
                "teams_count": 2
              },
              "message": "User has been created successfully."
           }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users/me
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get Authenticated User'
      description: 'Get the authenticated user detail.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 500
        content: |-
          {
            "errors": [
              "Failed to get user detail."
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
              "user": {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "email": "john.doe@currikistudio.org",
                "organization_name": "Curriki",
                "organization_type": null,
                "job_title": "Developer",
                "address": "20660 Stevens Creek Blvd #332, Cupertino, CA 95014",
                "phone_number": "+1234567890",
                "website": "www.currikistudio.org",
                "subscribed": true,
                "organization_role": "Admin",
                "organization_role_id": 1,
                "organization_joined_at": "2022-10-12",
                "projects_count": 5,
                "groups_count": 1,
                "teams_count": 2
              },
              "message": "User has been created successfully."
           }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users/notifications
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get All User Notifications'
      description: 'Get a list of the users unread notification'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "notifications": [
                  {
                      "id": "afff2365-a4f3-48ab-8d53-6d958a9e3ab3",
                      "type": "App\\Notifications\\CloneNotification",
                      "notifiable_type": "App\\User",
                      "notifiable_id": 1243,
                      "data": {
                          "message": "Project(26 Project 2) has been duplicated successfully"
                      },
                      "read_at": null,
                      "created_at": "2020-10-16T13:46:33.000000Z",
                      "updated_at": "2020-10-16T13:46:33.000000Z"
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/suborganization/{suborganization_id}/users/notifications/export-list'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get All User Export list'
      description: 'Get a list of the users exported project'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      suborganization_id:
        name: suborganization_id
        description: 'The ID of the suborganization.'
        required: true
        example: 63
        type: integer
        custom: []
      suborganization:
        name: suborganization
        description: 'Id of an organization.'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      suborganization_id: 63
      suborganization: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      size:
        name: size
        description: 'Limit for getting the paginated records, Default 25.'
        required: false
        example: 25
        type: integer
        custom: []
      days_limit:
        name: days_limit
        description: 'limit for getting the exported project records, Default 10.'
        required: false
        example: '?days_limit=5'
        type: Days
        custom: []
    cleanBodyParameters:
      size: 25
      days_limit: '?days_limit=5'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          	"data": [
          		{
          			"id": "681e9e03-6601-4752-a360-5037f0401bba",
          			"project": "Metrics Project",
          			"created_at": "14-Jun-2022",
          			"will_expire_on": "24-Jun-2022",
          			"link": "/api/storage/exports/projects-62a877f9af025.zip"
          		},
          		{
          			"id": "21f86165-698f-4c7e-ac8a-7ddace3fca73",
          			"project": "Pro Micro",
          			"created_at": "09-Jun-2022",
          			"will_expire_on": "19-Jun-2022",
          			"link": "/api/storage/exports/projects-62a1f02f43a7b.zip"
          		}
          	],
              "links": {
          		"first": "suborganization/1/users/notifications/export-list?size=10&page=1",
          		"last": "suborganization/1/users/notifications/export-list?size=10&page=1",
          		"prev": null,
          		"next": null
          	},
              "meta": {
          		"current_page": 1,
          		"from": 1,
          		"last_page": 1,
          		"path": "suborganization/1/users/notifications/export-list",
          		"per_page": "10",
          		"to": 2,
          		"total": 2
          	}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/suborganization/{suborganization_id}/users/notifications/export-list-independent-activities'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get All User Export list'
      description: 'Get a list of the users exported project'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      suborganization_id:
        name: suborganization_id
        description: 'The ID of the suborganization.'
        required: true
        example: 63
        type: integer
        custom: []
      suborganization:
        name: suborganization
        description: 'Id of an organization.'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      suborganization_id: 63
      suborganization: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      size:
        name: size
        description: 'Limit for getting the paginated records, Default 25.'
        required: false
        example: 25
        type: integer
        custom: []
      days_limit:
        name: days_limit
        description: 'limit for getting the exported project records, Default 10.'
        required: false
        example: '?days_limit=5'
        type: Days
        custom: []
    cleanBodyParameters:
      size: 25
      days_limit: '?days_limit=5'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          	"data": [
          		{
          			"id": "e66ce14f-e8c0-4fcd-8e9c-0a53453c6da0",
          			"project": "Test new Drag 1.14",
          			"created_at": "17-Jun-2022",
          			"will_expire_on": "27-Jun-2022",
          			"link": "storage/exports/independent_activity-62ac5c287b011.zip",
          			"organization_id": 1
          		},
          		{
          			"id": "e1ef3916-645e-40ed-81b3-0143d9fc19f6",
          			"project": "Taurus 10 Jun 2022 edited-COPY edited",
          			"created_at": "17-Jun-2022",
          			"will_expire_on": "27-Jun-2022",
          			"link": "storage/exports/independent_activity-62ac5c2566576.zip",
          			"organization_id": 1
          		}
          	],
          	
              "links": {
          		"first": "suborganization/1/users/notifications/export-list-independent-activities?size=10&page=1",
          		"last": "suborganization/1/users/notifications/export-list-independent-activities?size=10&page=1",
          		"prev": null,
          		"next": null
          	},
              "meta": {
          		"current_page": 1,
          		"from": 1,
          		"last_page": 1,
          		"path": "suborganization/1/users/notifications/export-list-independent-activities",
          		"per_page": "10",
          		"to": 2,
          		"total": 2
          	}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users/notifications/read-all
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Read All Notifications'
      description: 'Read all notifications of the specified user.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 500
        content: |-
          {
            "errors": [
              "Failed to read notifications."
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |
          {
              "notifications": [
                  {
                      "id": "afff2365-a4f3-48ab-8d53-6d958a9e3ab3",
                      "type": "App\\Notifications\\CloneNotification",
                      "notifiable_type": "App\\User",
                      "notifiable_id": 1243,
                      "data": {
                          "message": "Project(26 Project 2) has been duplicated successfully"
                      },
                      "read_at": null,
                      "created_at": "2020-10-16T13:46:33.000000Z",
                      "updated_at": "2020-10-16T13:46:33.000000Z"
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/users/notifications/{notification}/read'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Read Notification'
      description: 'Read notification of the specified user.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      notification:
        name: notification
        description: 'The notification.'
        required: true
        example: eius
        type: string
        custom: []
      notification_id:
        name: notification_id
        description: 'Current id of a notification'
        required: true
        example: '123'
        type: string
        custom: []
    cleanUrlParameters:
      notification: eius
      notification_id: '123'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 500
        content: |-
          {
            "errors": [
              "Failed to read notification."
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |
          {
              "notifications": [
                  {
                      "id": "afff2365-a4f3-48ab-8d53-6d958a9e3ab3",
                      "type": "App\\Notifications\\CloneNotification",
                      "notifiable_type": "App\\User",
                      "notifiable_id": 1243,
                      "data": {
                          "message": "Project(26 Project 2) has been duplicated successfully"
                      },
                      "read_at": null,
                      "created_at": "2020-10-16T13:46:33.000000Z",
                      "updated_at": "2020-10-16T13:46:33.000000Z"
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/users/notifications/{notification}/delete'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Delete Notification'
      description: 'Remove the specified notification from storage.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      notification:
        name: notification
        description: 'The notification.'
        required: true
        example: distinctio
        type: string
        custom: []
      notification_id:
        name: notification_id
        description: 'Current id of a notification'
        required: true
        example: '123'
        type: string
        custom: []
    cleanUrlParameters:
      notification: distinctio
      notification_id: '123'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Notification has been deleted successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "errors": [
              "Failed to delete notification."
            ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/users/search
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get All Users for Team'
      description: 'Get a list of the users for Team.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      search:
        name: search
        description: 'Search string for User'
        required: true
        example: Abby
        type: string
        custom: []
    cleanBodyParameters:
      search: Abby
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "users": [
                  {
                      "id": 1,
                      "first_name": "John",
                      "last_name": "Doe"
                  },
                  {
                      "id": 2,
                      "first_name": "Jane",
                      "last_name": "Doe"
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/suborganization/{suborganization_id}/users/search'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get All Organization Users'
      description: 'Get a list of the organization users.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      suborganization_id:
        name: suborganization_id
        description: 'The ID of the suborganization.'
        required: true
        example: 63
        type: integer
        custom: []
      Organization:
        name: Organization
        description: $suborganization
        required: false
        example: non
        type: string
        custom: []
    cleanUrlParameters:
      suborganization_id: 63
      Organization: non
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      search:
        name: search
        description: 'Search string for User'
        required: true
        example: Abby
        type: string
        custom: []
    cleanBodyParameters:
      search: Abby
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "users": [
                  {
                      "id": 1,
                      "first_name": "John",
                      "last_name": "Doe"
                  },
                  {
                      "id": 2,
                      "first_name": "Jane",
                      "last_name": "Doe"
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/suborganization/{suborganization_id}/users/check'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Check Organization User'
      description: 'Check if organization user exist in specific organization or not.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      suborganization_id:
        name: suborganization_id
        description: 'The ID of the suborganization.'
        required: true
        example: 63
        type: integer
        custom: []
      Organization:
        name: Organization
        description: $suborganization
        required: false
        example: voluptatibus
        type: string
        custom: []
    cleanUrlParameters:
      suborganization_id: 63
      Organization: voluptatibus
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      organization_id:
        name: organization_id
        description: 'Organization Id'
        required: true
        example: '1'
        type: inetger
        custom: []
      user_id:
        name: user_id
        description: 'User id'
        required: true
        example: '1'
        type: inetger
        custom: []
    cleanBodyParameters:
      organization_id: '1'
      user_id: '1'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "invited": true,
            "message": "Success"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "invited": false,
            "message": "error"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/suborganization/{suborganization_id}/users/check-email'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Check User Email'
      description: 'Check if user email exist in the instance.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      suborganization_id:
        name: suborganization_id
        description: 'The ID of the suborganization.'
        required: true
        example: 63
        type: integer
        custom: []
      suborganization:
        name: suborganization
        description: 'The Id of a suborganization'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      suborganization_id: 63
      suborganization: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email of a user'
        required: true
        example: john.doe@currikistudio.org
        type: string
        custom: []
    cleanBodyParameters:
      email: john.doe@currikistudio.org
    fileParameters: []
    responses:
      -
        status: 422
        content: |-
          {
            "message": "The user already exists in the organization."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
              "user": {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "email": "john.doe@currikistudio.org",
                "organization_name": "Curriki",
                "organization_type": null,
                "job_title": "Developer",
                "address": "20660 Stevens Creek Blvd #332, Cupertino, CA 95014",
                "phone_number": "+1234567890",
                "website": "www.currikistudio.org",
                "subscribed": true,
                "organization_role": "Admin",
                "organization_role_id": 1,
                "organization_joined_at": "2022-10-12",
                "projects_count": 5,
                "groups_count": 1,
                "teams_count": 2
              },
              "message": "User has been created successfully."
           }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/users/update-password
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Update Password'
      description: 'Update password of the specified user in storage.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: 'Current password of a user'
        required: true
        example: Password123
        type: string
        custom: []
      password:
        name: password
        description: 'New password to be set for a user'
        required: true
        example: Password321
        type: string
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation of new password'
        required: true
        example: Password321
        type: string
        custom: []
    cleanBodyParameters:
      current_password: Password123
      password: Password321
      password_confirmation: Password321
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Password has been updated successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "errors": [
              "Invalid request."
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "errors": [
              "Failed to update password."
            ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get All Users'
      description: 'Get a list of the users.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "users": [
                  {
                      "id": 1,
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "john.doe@currikistudio.org",
                      "organization_name": "Curriki",
                      "organization_type": null,
                      "job_title": "Developer",
                      "address": "20660 Stevens Creek Blvd #332, Cupertino, CA 95014",
                      "phone_number": "+1234567890",
                      "website": "www.currikistudio.org",
                      "subscribed": true
                  },
                  {
                      "id": 2,
                      "first_name": "Jane",
                      "last_name": "Doe",
                      "email": "jane.doe@currikistudio.org",
                      "organization_name": "Curriki",
                      "organization_type": null,
                      "job_title": "Manager",
                      "address": "20660 Stevens Creek Blvd #333, Cupertino, CA 95014",
                      "phone_number": "+1234567891",
                      "website": "www.currikistudio.org",
                      "subscribed": true
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get User'
      description: 'Get the specified user detail.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1544
        type: integer
        custom: []
      user:
        name: user
        description: 'The Id of a user'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      id: 1544
      user: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "user": {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "email": "john.doe@currikistudio.org",
                "organization_name": "Curriki",
                "organization_type": null,
                "job_title": "Developer",
                "address": "20660 Stevens Creek Blvd #332, Cupertino, CA 95014",
                "phone_number": "+1234567890",
                "website": "www.currikistudio.org",
                "subscribed": true,
                "organization_role": "Admin",
                "organization_role_id": 1,
                "organization_joined_at": "2022-10-12",
                "projects_count": 5,
                "groups_count": 1,
                "teams_count": 2
              },
              "message": "User has been created successfully."
           }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Update User'
      description: 'Update the specified user in storage.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1544
        type: integer
        custom: []
      user:
        name: user
        description: 'The Id of a user'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      id: 1544
      user: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      first_name:
        name: first_name
        description: 'First name of a user'
        required: true
        example: John
        type: string
        custom: []
      last_name:
        name: last_name
        description: 'Last name of a user'
        required: true
        example: Doe
        type: string
        custom: []
      organization_name:
        name: organization_name
        description: 'Organization name of a user'
        required: false
        example: Curriki
        type: string
        custom: []
      organization_type:
        name: organization_type
        description: 'Must not be greater than 255 characters.'
        required: false
        example: bilrgeik
        type: string
        custom: []
      website:
        name: website
        description: 'Website url of a user'
        required: false
        example: www.currikistudio.org
        type: string
        custom: []
      job_title:
        name: job_title
        description: 'Job title of a user'
        required: false
        example: Developer
        type: string
        custom: []
      address:
        name: address
        description: 'Address of a user'
        required: false
        example: '20660 Stevens Creek Blvd #332, Cupertino, CA 95014'
        type: string
        custom: []
      phone_number:
        name: phone_number
        description: 'Phone number of a user'
        required: false
        example: '+1234567890'
        type: string
        custom: []
    cleanBodyParameters:
      first_name: John
      last_name: Doe
      organization_name: Curriki
      organization_type: bilrgeik
      website: www.currikistudio.org
      job_title: Developer
      address: '20660 Stevens Creek Blvd #332, Cupertino, CA 95014'
      phone_number: '+1234567890'
    fileParameters: []
    responses:
      -
        status: 500
        content: |-
          {
            "errors": [
              "Failed to update profile."
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
              "user": {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "email": "john.doe@currikistudio.org",
                "organization_name": "Curriki",
                "organization_type": null,
                "job_title": "Developer",
                "address": "20660 Stevens Creek Blvd #332, Cupertino, CA 95014",
                "phone_number": "+1234567890",
                "website": "www.currikistudio.org",
                "subscribed": true,
                "organization_role": "Admin",
                "organization_role_id": 1,
                "organization_joined_at": "2022-10-12",
                "projects_count": 5,
                "groups_count": 1,
                "teams_count": 2
              },
              "message": "User has been created successfully."
           }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Delete User'
      description: 'Remove the specified user from storage.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1544
        type: integer
        custom: []
      user:
        name: user
        description: 'The Id of a user'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      id: 1544
      user: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User has been deleted successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "errors": [
              "Failed to delete profile."
            ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/suborganization/{suborganization_id}/users/export-request'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Process User Export Request'
      description: 'Process the request to export users and their projects and independent activities.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      suborganization_id:
        name: suborganization_id
        description: 'The ID of the suborganization.'
        required: true
        example: 63
        type: integer
        custom: []
      suborganization:
        name: suborganization
        description: 'The Id of a suborganization'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      suborganization_id: 63
      suborganization: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      users:
        name: users
        description: 'file containing user emails to export data for.'
        required: false
        example: ducimus
        type: CSV
        custom: []
    cleanBodyParameters:
      users: ducimus
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Your request to export users and their projects and independent activities has been received and is being processed. <br> You will be alerted in the notification section in the title bar when complete."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/suborganization/{suborganization_id}/users/import-request'
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Process User Import Request'
      description: 'Process the request to import users and their projects and independent activities.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      suborganization_id:
        name: suborganization_id
        description: 'The ID of the suborganization.'
        required: true
        example: 63
        type: integer
        custom: []
      suborganization:
        name: suborganization
        description: 'The Id of a suborganization'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      suborganization_id: 63
      suborganization: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      path:
        name: path
        description: 'Path to folder to import from'
        required: false
        example: veniam
        type: required
        custom: []
    cleanBodyParameters:
      path: veniam
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Your request to import users and their projects and independent activities has been received and is being processed. <br> You will be alerted in the notification section in the title bar when complete."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users/report/basic
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Users Basic Report'
      description: 'Returns the paginated response of the users with basic reporting.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      size:
        name: size
        description: 'Limit for getting the paginated records, Default 25.'
        required: false
        example: 25
        type: integer
        custom: []
      query:
        name: query
        description: 'For getting the search records by name and email.'
        required: false
        example: Test
        type: string
        custom: []
    cleanBodyParameters:
      size: 25
      query: Test
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "current_page": 1,
              "data": [
                  {
                      "id": 1242,
                      "first_name": "123security",
                      "last_name": "products",
                      "email": "wirelessproducts.wl@gmail.com",
                      "projects_count": 2,
                      "playlists_count": 9,
                      "activities_count": 60
                  },
                  {
                      "id": 824,
                      "first_name": "168xoso",
                      "last_name": "com",
                      "email": "168xosocom@gmail.com",
                      "projects_count": 2,
                      "playlists_count": 9,
                      "activities_count": 60
                  }
              ],
              "first_page_url": "https://currikistudio.org/api/api/api/v1/admin/users/report/basic?page=1",
              "from": 1,
              "last_page": 816,
              "last_page_url": "https://currikistudio.org/api/api/api/v1/admin/users/report/basic?page=816",
              "next_page_url": "https://currikistudio.org/api/api/api/v1/admin/users/report/basic?page=2",
              "path": "https://currikistudio.org/api/api/api/v1/admin/users/report/basic",
              "per_page": "2",
              "prev_page_url": null,
              "to": 2,
              "total": 1632
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/projects/shared
    metadata:
      groupName: '2. User'
      groupDescription: |-

        APIs for user management
      subgroup: null
      subgroupDescription: null
      title: 'Get All Shared Projects'
      description: 'Get a list of the shared projects of a user.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: ''
        required: true
        example: 16
        type: integer
        custom: []
    cleanBodyParameters:
      user_id: 16
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "projects": [
                  {
                      "id": 1,
                      "name": "Test Project",
                      "description": "This is a test project.",
                      "thumb_url": "https://images.pexels.com/photos/2832382",
                      "shared": true,
                      "starter_project": null,
                      "is_public": true,
                      "gcr_project_visibility": true,
                      "created_at": "2020-09-06T19:21:08.000000Z",
                      "updated_at": "2020-09-06T19:21:08.000000Z"
                  },
                  {
                      "id": 2,
                      "name": "Math Project",
                      "description": "This is a test math project.",
                      "thumb_url": "https://images.pexels.com/photos/2832384",
                      "shared": true,
                      "starter_project": null,
                      "is_public": true,
                      "created_at": "2020-09-07T19:21:08.000000Z",
                      "updated_at": "2020-09-07T19:21:08.000000Z"
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
